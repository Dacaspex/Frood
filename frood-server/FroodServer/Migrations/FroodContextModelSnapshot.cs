// <auto-generated />
using System;
using FroodServer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FroodServer.Migrations
{
    [DbContext(typeof(FroodContext))]
    partial class FroodContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("FroodServer.Entities.MoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MoodReportId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MoodReportId");

                    b.ToTable("MoodCategories");
                });

            modelBuilder.Entity("FroodServer.Entities.MoodReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("GlobalMood")
                        .HasColumnType("REAL");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId")
                        .IsUnique();

                    b.ToTable("MoodReports");
                });

            modelBuilder.Entity("FroodServer.Entities.MoodTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MoodCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MoodCategoryId");

                    b.ToTable("MoodTopics");
                });

            modelBuilder.Entity("FroodServer.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Secret")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("FroodServer.Entities.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("FroodServer.Entities.MoodCategory", b =>
                {
                    b.HasOne("FroodServer.Entities.MoodReport", "MoodReport")
                        .WithMany("MoodCategories")
                        .HasForeignKey("MoodReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoodReport");
                });

            modelBuilder.Entity("FroodServer.Entities.MoodReport", b =>
                {
                    b.HasOne("FroodServer.Entities.Partner", "Partner")
                        .WithOne("MoodReport")
                        .HasForeignKey("FroodServer.Entities.MoodReport", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("FroodServer.Entities.MoodTopic", b =>
                {
                    b.HasOne("FroodServer.Entities.MoodCategory", "MoodCategory")
                        .WithMany("MoodTopics")
                        .HasForeignKey("MoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoodCategory");
                });

            modelBuilder.Entity("FroodServer.Entities.Partner", b =>
                {
                    b.HasOne("FroodServer.Entities.Space", "Space")
                        .WithMany("Partners")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("FroodServer.Entities.MoodCategory", b =>
                {
                    b.Navigation("MoodTopics");
                });

            modelBuilder.Entity("FroodServer.Entities.MoodReport", b =>
                {
                    b.Navigation("MoodCategories");
                });

            modelBuilder.Entity("FroodServer.Entities.Partner", b =>
                {
                    b.Navigation("MoodReport")
                        .IsRequired();
                });

            modelBuilder.Entity("FroodServer.Entities.Space", b =>
                {
                    b.Navigation("Partners");
                });
#pragma warning restore 612, 618
        }
    }
}
